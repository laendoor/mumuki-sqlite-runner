var search_data = {"index":{"searchIndex":["sqlite","checker","htmlrenderer","multipleexecutionsrunner","sqlitemetadatahook","sqlitetesthook","check()","check_equal()","command_line()","compile_file_content()","framework()","metadata()","parse_test()","post_process_datasets()","post_process_file()","render_error()","render_error_output()","render_success()","render_success_output()","run()","split_rows()","tempfile_extension()","template_file_error()","template_file_success()","readme"],"longSearchIndex":["sqlite","sqlite::checker","sqlite::htmlrenderer","sqlite::multipleexecutionsrunner","sqlitemetadatahook","sqlitetesthook","sqlite::checker#check()","sqlite::checker#check_equal()","sqlitetesthook#command_line()","sqlitetesthook#compile_file_content()","sqlitetesthook#framework()","sqlitemetadatahook#metadata()","sqlitetesthook#parse_test()","sqlitetesthook#post_process_datasets()","sqlitetesthook#post_process_file()","sqlite::htmlrenderer#render_error()","sqlite::checker#render_error_output()","sqlite::htmlrenderer#render_success()","sqlite::checker#render_success_output()","sqlite::multipleexecutionsrunner#run()","sqlite::htmlrenderer#split_rows()","sqlitetesthook#tempfile_extension()","sqlite::htmlrenderer#template_file_error()","sqlite::htmlrenderer#template_file_success()",""],"info":[["Sqlite","","Sqlite.html","",""],["Sqlite::Checker","","Sqlite/Checker.html","",""],["Sqlite::HtmlRenderer","","Sqlite/HtmlRenderer.html","",""],["Sqlite::MultipleExecutionsRunner","","Sqlite/MultipleExecutionsRunner.html","",""],["SqliteMetadataHook","","SqliteMetadataHook.html","",""],["SqliteTestHook","","SqliteTestHook.html","","<p>This Hook allow to run Sqlite Worker from an adhoc program that receives\n.sql files.\n"],["check","Sqlite::Checker","Sqlite/Checker.html#method-i-check","(result, solution)","<p>Verify if example dataset is equals than result if ok: Return passed &amp;\nrender success if ok else …\n"],["check_equal","Sqlite::Checker","Sqlite/Checker.html#method-i-check_equal","(result, solution)","<p>Verify if both datasets are equals Temp: comparing raw strings Todo:\nconvert into some struct and check …\n"],["command_line","SqliteTestHook","SqliteTestHook.html#method-i-command_line","(filename)","<p>Define the command to be run by sqlite worker\n"],["compile_file_content","SqliteTestHook","SqliteTestHook.html#method-i-compile_file_content","(request)","<p>Define the .sql file template from request structure request = {\n\n<pre>test: (string) teacher&#39;s code that define ...</pre>\n"],["framework","SqliteTestHook","SqliteTestHook.html#method-i-framework","()","<p>Initialize Metatest Framework with Checker &amp; Runner\n"],["metadata","SqliteMetadataHook","SqliteMetadataHook.html#method-i-metadata","()",""],["parse_test","SqliteTestHook","SqliteTestHook.html#method-i-parse_test","(content)","<p>Split query by &#39;– DATASET&#39; line match First match is teacher&#39;s\nsolution Rest are Datasets …\n"],["post_process_datasets","SqliteTestHook","SqliteTestHook.html#method-i-post_process_datasets","(datasets)","<p>Transforms array datasets into hash with :id &amp; :rows\n"],["post_process_file","SqliteTestHook","SqliteTestHook.html#method-i-post_process_file","(_file, result, status)","<p>Define how output results Expected: {\n\n<pre>&quot;solutions&quot;: [\n    &quot;name\\nTest 1.1\\nTest 1.2\\nTest 1.3\\n&quot;,\n    &quot;name\\nTest ...</pre>\n"],["render_error","Sqlite::HtmlRenderer","Sqlite/HtmlRenderer.html#method-i-render_error","(result, solution, error)",""],["render_error_output","Sqlite::Checker","Sqlite/Checker.html#method-i-render_error_output","(result, solution, error)","<p>Return error page rendered with results &amp; solutions\n"],["render_success","Sqlite::HtmlRenderer","Sqlite/HtmlRenderer.html#method-i-render_success","(result)",""],["render_success_output","Sqlite::Checker","Sqlite/Checker.html#method-i-render_success_output","(result)","<p>Return success page rendered with results\n"],["run","Sqlite::MultipleExecutionsRunner","Sqlite/MultipleExecutionsRunner.html#method-i-run","(output, example)",""],["split_rows","Sqlite::HtmlRenderer","Sqlite/HtmlRenderer.html#method-i-split_rows","(result)",""],["tempfile_extension","SqliteTestHook","SqliteTestHook.html#method-i-tempfile_extension","()","<p>Just define file extension\n"],["template_file_error","Sqlite::HtmlRenderer","Sqlite/HtmlRenderer.html#method-i-template_file_error","()",""],["template_file_success","Sqlite::HtmlRenderer","Sqlite/HtmlRenderer.html#method-i-template_file_success","()",""],["README","","README_md.html","","<p><img\nsrc=\"https://travis-ci.org/leandrojdl/mumuki-sqlite-runner.svg?branch=master\">\n<img\nsrc=\"https://codeclimate.com/github/leandrojdl/mumuki-sqlite-runner/badges/gpa.svg\">\n...\n"]]}}